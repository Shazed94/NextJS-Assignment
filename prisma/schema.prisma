// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  firstName    String   @db.VarChar(50)
  middleName   String   @db.VarChar(50)
  lastName     String   @db.VarChar(50)
  mobile       String   @db.VarChar(15)
  email        String   @db.VarChar(50)
  passwordHash String   @db.VarChar(32) 
  intro        String   @db.TinyText
  profile      String   @db.Text
  registeredAt DateTime @default(now()) @db.Timestamp(0)
  lastLogin    DateTime @default(now()) @updatedAt @db.Timestamp(0)
  // post         post[]
}

model post {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  authorId     BigInt   @db.UnsignedBigInt
  parentId     BigInt   @db.UnsignedBigInt
  title        String   @db.VarChar(75)
  metaTitle    String   @db.VarChar(100)
  slug         String   @db.VarChar(100)
  summery      String   @db.TinyText
  published    Int      @db.TinyInt
  content      String   @db.Text
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamp(0)
  published_at DateTime @default(now()) @updatedAt @db.Timestamp(0)
  // user         user     @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // post_comment  post_comment[]
  // post_meta     post_meta[]
  // post_category post_category[]
  // post_tag      post_tag[]
}

model post_comment {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  postId     BigInt   @db.UnsignedBigInt
  parentId   BigInt   @db.UnsignedBigInt
  title      String   @db.VarChar(100)
  published  Int      @db.TinyInt
  content    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(0)
  // post       post     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model post_meta {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  postId     BigInt   @db.UnsignedBigInt
  key        String   @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(0)
  content    String   @db.Text

  // post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model post_category {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt

  postId     BigInt @db.UnsignedBigInt
  categoryId BigInt @db.UnsignedBigInt

  // post     post     @relation(fields: [postId], references: [id])
  // category category @relation(fields: [categoryId], references: [id])
}

model category {
  id        BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  parentId  BigInt @db.UnsignedBigInt
  title     String @db.VarChar(75)
  metaTitle String @db.VarChar(100)
  slug      String @db.VarChar(100)
  content   String @db.Text

  // post_category post_category[]
}

model post_tag {
  id     BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  postId BigInt @db.UnsignedBigInt
  tagId  BigInt @db.UnsignedBigInt

  // post post @relation(fields: [postId], references: [id])
  // tag  tag  @relation(fields: [tagId], references: [id])
}

model tag {
  id        BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  title     String @db.VarChar(75)
  metaTitle String @db.VarChar(100)
  slug      String @db.VarChar(100)

  // post_tag post_tag[]
}
